
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        client_max_body_size 2G;  # 将上传限制设置为 2G
        client_body_timeout 600s;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   dist/inner;
            index  index.html index.htm;
        }

        location /api {
			proxy_pass http://127.0.0.1:8080;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			# CORS Headers - 允许所有来源
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
			add_header 'Access-Control-Allow-Headers' 'Origin,Accept,Content-Type,X-Requested-With,X-CSRF-Token,Authorization' always;

			# 处理预检请求（OPTIONS）
			if ($request_method = OPTIONS) {
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Content-Length' 0;
				return 204;
			}
		}

                # 上传入口
        location /upload {
            # 1. 文件先落地
            upload_pass          @after_upload;     # 接收完后跳转
            upload_store         /tmp/nginx_upload 1;
            upload_store_access  user:rw group:rw all:rw;

            # 2. 把文件信息重新注入表单
            upload_set_form_field file[name] "$upload_file_name";
            upload_set_form_field file[path] "$upload_tmp_path";
            upload_set_form_field file[type] "$upload_content_type";
            upload_aggregate_form_field file[size] "$upload_file_size";
            upload_aggregate_form_field file[md5]  "$upload_file_md5";

            # 3. 原表单其它字段也透传
            upload_pass_form_field "^.*$";

            # 4. 出错自动清理
            upload_cleanup 400 404 499 500-505;
        }

        # 真正干活的后端（这里以 PHP-FPM 为例）
        location @after_upload {
            proxy_pass http://127.0.0.1:8080;   # 或 fastcgi_pass
        }

        # 可选：下载/浏览已传文件
        location /files {
            alias /var/www/files/;
            autoindex on;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
